
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "regreplaceR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "regreplaceR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('regreplaceR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Replacer")
> ### * Replacer
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Replacer
> ### Title: Replacer Class for Regex Operations
> ### Aliases: Replacer
> 
> ### ** Examples
> 
> # Create a new Replacer object
> r <- Replacer$new(pattern = ".*?_(?P<date>\\d{8}-\\d{6})(?P<ext>\\..+$)")
> 
> # Match a group within a string
> r$match("file_20230905-123456.txt", "date")
[1] "20230905-123456"
> 
> # Replace the value of a matched group
> r$replace("file_20230905-123456.txt", "date", "20240905-123456")
[1] "file_20240905-123456.txt"
> 
> ## ------------------------------------------------
> ## Method `Replacer$new`
> ## ------------------------------------------------
> 
> r <- Replacer$new(pattern=".*?_(?P<date>\\d{8}-\\d{6}( \\(1\\))*)(?P<ext>\\..+$)")
> 
> ## ------------------------------------------------
> ## Method `Replacer$match`
> ## ------------------------------------------------
> 
> r <- Replacer$new(pattern=".*?_(?P<date>\\d{8}-\\d{6})(?P<ext>\\..+$)")
> r$match("file_20230905-123456.txt", "date")
[1] "20230905-123456"
> 
> ## ------------------------------------------------
> ## Method `Replacer$replace`
> ## ------------------------------------------------
> 
> r <- Replacer$new(pattern=".*?_(?P<date>\\d{8}-\\d{6})(?P<ext>\\..+$)")
> r$replace("file_20230905-123456.txt", "date", "20240905-123456")
[1] "file_20240905-123456.txt"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Replacer", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("groups")
> ### * groups
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: groups
> ### Title: Extract Named Groups from a String Using a Regex Pattern
> ### Aliases: groups
> 
> ### ** Examples
> 
> pattern <- "(?P<name>\\w+) is (?P<age>\\d+)"
> s <- "Jane is 25"
> groups(pattern, s)
$name
[1] "Jane"

$age
[1] "25"

> # $name
> # [1] "Jane"
> # $age
> # [1] "25"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("groups", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("match_group")
> ### * match_group
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: match_group
> ### Title: Extract a Specific Named Group from a String
> ### Aliases: match_group
> 
> ### ** Examples
> 
> pattern <- "(?P<name>\\w+) is (?P<age>\\d+)"
> s <- "Jane is 25"
> match_group(pattern, s, "name")
[1] "Jane"
> # [1] "Jane"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("match_group", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("replace_group")
> ### * replace_group
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: replace_group
> ### Title: Replace a Specific Named Group in a String
> ### Aliases: replace_group
> 
> ### ** Examples
> 
> pattern <- "(?P<name>\\w+) is (?P<age>\\d+)"
> s <- "Jane is 25"
> replace_group(pattern, s, "name", "John")
[1] "John is 25"
> # [1] "John is 25"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("replace_group", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.059 0.003 0.065 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
